<h3>Experimental: Modals</h3>

<p>
  Bear with me here.
</p>

<p>
  This is an experiment combining many different concepts of ember-concurrency,
  some old, some new/unrelease.
</p>

<p>
  State machines generally operate on the principle that you can
  only be in a single (possible nested) state at a time.
  Given that <strong>ember-concurrency</strong> makes it possible/easy
  to constrain the concurrency of tasks (and between tasks using
  task groups), what's the fundamental difference between a state
  in a state machine vs a task that can't run at the same time
  as sibling tasks? Answer: not a whole lot!
</p>

<p>
  The following ember-concurrency concepts are used to implement
  the example below:
</p>

<ol>
  <li>Using taskGroups to group tasks (states) that shouldn't
    be allowed to run at the same time.</li>
  <li>POJO tasks / encapsulated tasks / stateful tasks / whatever we end up calling them</li>
  <li>
    Accessing the most recent performed task (entered state) via nameOfTask.last*
  </li>
</ol>

{{! BEGIN-SNIPPET modal-fun-template }}
<p>
  <button onclick={{perform openWizard}}
          class={{if openWizard.isIdle 'clickable'}}>
    Open Wizard
  </button>
</p>

{{#with openWizard.lastRunning as |modal|}}
  {{#modal-dialog}}
    <div class="fun-modal-container">
      <div class="row">
        <div class="u-pull-right">
          <button onclick={{cancel-all modal.task}}>Close</button>
        </div>
      </div>

      <h1>{{modal.currentState.title}}</h1>
      <p>Wat wat wat</p>

      <div class="row">
        {{#if modal.prev}}
          <div class="u-pull-left">
            <button onclick={{perform modal.prev}}>Prev</button>
          </div>
        {{/if}}

        {{#if modal.next}}
          <div class="u-pull-right">
            <button onclick={{perform modal.next}}>Next</button>
          </div>
        {{/if}}
      </div>
    </div>
  {{/modal-dialog}}
{{/with}}

{{! END-SNIPPET }}

{{code-snippet name="modal-fun-controller.js"}}
{{code-snippet name="modal-fun-template.hbs"}}

