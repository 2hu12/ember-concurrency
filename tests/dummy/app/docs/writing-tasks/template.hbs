<h3>Writing Tasks</h3>

<p>
  Step one of writing a task is deciding which object it'll live on &mdash; remember
  that all ember-concurrency tasks are scoped to the lifetime of the object it lives
  on, such that when that host object is destroyed, the task is cancelled. So if
  you want the task to cancel when a component is unrendered, put it on a component.
  If you want it to have a longer life span than a component, perhaps it belongs on
  a service.
</p>

<p>
  Once you've decided where you want a task to live, you can start implementing
  your task.
</p>

{{code-snippet name="writing-tasks.js"}}

<h3>Starting a task</h3>

<p>
  There are three ways to start a task:
</p>

<ol>
  <li>
    In JavaScript, get a reference to the task and call <code>task.perform(...)</code>
  </li>
  <li>
    In your Handlebars template, pass <code>nameOfTask.perform</code> to the <code>action</code>
    helper or into components as actions. This is the most direct and preferable way to
    invoke a task, but keep in mind that for this to work you must <em>not</em> declare
    the hash in the <code>actions</code> hash.
  </li>
  <li>
    In JavaScript, specify the Ember Events that should cause the task to
    run using <code>task(...).on(eventName)</code>. You can use <code>.on('init')</code>
    to create a task the runs as soon as the object it lives on is initialized.
  </li>
</ol>

<p>
  The following example demonstrates all three variants:
</p>

<h5>Live Example</h5>

{{start-task-example}}


